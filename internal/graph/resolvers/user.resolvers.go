package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/nicowernli/graphql-tutorial/internal/db/models"
	"github.com/nicowernli/graphql-tutorial/internal/db/repositories"
	graphmodels "github.com/nicowernli/graphql-tutorial/internal/graph/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input graphmodels.NewUser) (*graphmodels.User, error) {
	repo := repositories.NewUserRepository()
	newUser := &models.User{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
	}

	if err := repo.CreateUser(newUser); err != nil {
		return nil, err
	}

	return newUser.ToGraphqlModel(), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*graphmodels.User, error) {
	repo := repositories.NewUserRepository()
	users, err := repo.FindUsers(&models.UserQuery{})
	if err != nil {
		return nil, err
	}

	graphUsers := make([]*graphmodels.User, 0, len(users))
	for _, user := range users {
		graphUsers = append(graphUsers, user.ToGraphqlModel())
	}

	return graphUsers, nil
}
