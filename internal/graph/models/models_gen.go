// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphmodels

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

type NewTask struct {
	Name        string     `json:"name"`
	Description *string    `json:"description,omitempty"`
	Status      TaskStatus `json:"status"`
}

type NewUser struct {
	Email     string  `json:"email"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

type Task struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Status      TaskStatus `json:"status"`
	Description *string    `json:"description,omitempty"`
	Author      *User      `json:"author"`
	AssignedTo  []*User    `json:"assignedTo,omitempty"`
	CreatedAt   int64      `json:"createdAt"`
	UpdatedAt   int64      `json:"updatedAt"`
	RemovedAt   *int64     `json:"removedAt,omitempty"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	CreatedAt int64     `json:"createdAt"`
	UpdatedAt int64     `json:"updatedAt"`
	RemovedAt *int64    `json:"removedAt,omitempty"`
}

type TaskStatus string

const (
	TaskStatusSoon         TaskStatus = "SOON"
	TaskStatusNow          TaskStatus = "NOW"
	TaskStatusInprogress   TaskStatus = "INPROGRESS"
	TaskStatusPending      TaskStatus = "PENDING"
	TaskStatusTesting      TaskStatus = "TESTING"
	TaskStatusReadyforprod TaskStatus = "READYFORPROD"
	TaskStatusReleased     TaskStatus = "RELEASED"
	TaskStatusDone         TaskStatus = "DONE"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusSoon,
	TaskStatusNow,
	TaskStatusInprogress,
	TaskStatusPending,
	TaskStatusTesting,
	TaskStatusReadyforprod,
	TaskStatusReleased,
	TaskStatusDone,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusSoon, TaskStatusNow, TaskStatusInprogress, TaskStatusPending, TaskStatusTesting, TaskStatusReadyforprod, TaskStatusReleased, TaskStatusDone:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
